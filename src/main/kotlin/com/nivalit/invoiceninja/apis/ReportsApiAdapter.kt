/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.nivalit.invoiceninja.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.nivalit.invoiceninja.models.AuthenticationError
import com.nivalit.invoiceninja.models.AuthorizationError
import com.nivalit.invoiceninja.models.Error
import com.nivalit.invoiceninja.models.GenericReportSchema
import com.nivalit.invoiceninja.models.ValidationError

import com.squareup.moshi.Json

import com.nivalit.invoiceninja.infrastructure.ApiClient
import com.nivalit.invoiceninja.infrastructure.ApiResponse
import com.nivalit.invoiceninja.infrastructure.ClientException
import com.nivalit.invoiceninja.infrastructure.ClientError
import com.nivalit.invoiceninja.infrastructure.ServerException
import com.nivalit.invoiceninja.infrastructure.ServerError
import com.nivalit.invoiceninja.infrastructure.MultiValueMap
import com.nivalit.invoiceninja.infrastructure.PartConfig
import com.nivalit.invoiceninja.infrastructure.RequestConfig
import com.nivalit.invoiceninja.infrastructure.RequestMethod
import com.nivalit.invoiceninja.infrastructure.ResponseType
import com.nivalit.invoiceninja.infrastructure.Success
import com.nivalit.invoiceninja.infrastructure.toMultiValue

class ReportsApiAdapter(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://demo.invoiceninja.com")
        }
    }

    /**
     * Client reports
     * Export client reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getClientReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getClientReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Client reports
     * Export client reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getClientReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getClientReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getClientReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getClientReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/clients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Contact reports
     * Export contact reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getContactReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getContactReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Contact reports
     * Export contact reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getContactReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getContactReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getContactReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getContactReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/contacts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Credit reports
     * Export credit reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCreditReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getCreditReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Credit reports
     * Export credit reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getCreditReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getCreditReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCreditReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getCreditReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/credit",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Document reports
     * Export document reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDocumentReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getDocumentReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Document reports
     * Export document reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getDocumentReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getDocumentReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDocumentReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getDocumentReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/documents",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Expense reports
     * Export expense reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getExpenseReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getExpenseReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Expense reports
     * Export expense reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getExpenseReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getExpenseReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getExpenseReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getExpenseReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/expense",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Invoice item reports
     * Export invoice item reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getInvoiceItemReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getInvoiceItemReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Invoice item reports
     * Export invoice item reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getInvoiceItemReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getInvoiceItemReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInvoiceItemReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getInvoiceItemReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/invoice_items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Invoice reports
     * Export invoice reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getInvoiceReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getInvoiceReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Invoice reports
     * Export invoice reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getInvoiceReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getInvoiceReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInvoiceReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getInvoiceReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/invoices",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Payment reports
     * Export payment reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPaymentReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getPaymentReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Payment reports
     * Export payment reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getPaymentReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getPaymentReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPaymentReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getPaymentReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/payments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Product reports
     * Export product reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProductReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getProductReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Product reports
     * Export product reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getProductReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getProductReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProductReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getProductReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/products",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Product Salesreports
     * Export product sales reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProductSalesReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getProductSalesReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Product Salesreports
     * Export product sales reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getProductSalesReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getProductSalesReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProductSalesReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getProductSalesReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/product_sales",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Profit loss reports
     * Profit loss report
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProfitLossReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getProfitLossReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Profit loss reports
     * Profit loss report
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getProfitLossReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getProfitLossReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProfitLossReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getProfitLossReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/profitloss",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Quote item reports
     * Export Quote item reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getQuoteItemReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getQuoteItemReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Quote item reports
     * Export Quote item reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getQuoteItemReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getQuoteItemReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getQuoteItemReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getQuoteItemReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/quote_items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Quote reports
     * Export quote reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getQuoteReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getQuoteReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Quote reports
     * Export quote reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getQuoteReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getQuoteReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getQuoteReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getQuoteReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/quotes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recurring Invoice reports
     * Export recurring invoice reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRecurringInvoiceReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getRecurringInvoiceReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recurring Invoice reports
     * Export recurring invoice reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getRecurringInvoiceReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getRecurringInvoiceReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRecurringInvoiceReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getRecurringInvoiceReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/recurring_invoices",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Task reports
     * Export task reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTaskReport(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : Unit {
        val localVarResponse = getTaskReportWithHttpInfo(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Task reports
     * Export task reports
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun getTaskReportWithHttpInfo(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : ApiResponse<Unit?> {
        val localVariableConfig = getTaskReportRequestConfig(xRequestedWith = xRequestedWith, genericReportSchema = genericReportSchema)

        return request<GenericReportSchema, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTaskReport
     *
     * @param xRequestedWith Used to send the XMLHttpRequest header
     * @param genericReportSchema 
     * @return RequestConfig
     */
    fun getTaskReportRequestConfig(xRequestedWith: kotlin.String, genericReportSchema: GenericReportSchema) : RequestConfig<GenericReportSchema> {
        val localVariableBody = genericReportSchema
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestedWith.apply { localVariableHeaders["X-Requested-With"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/reports/tasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
